akka {
  loglevel = debug
  log-dead-letters-during-shutdown = off
  log-dead-letters = off
  
  actor {
    provider = cluster

    allow-java-serialization = on

//    serializers {
//      file = "com.callhandling.typed.persistence.FileActorSerializer"
//      fileList = "com.callhandling.typed.persistence.FileListActorSerializer"
//    }
//    serialization-bindings {
//      "com.callhandling.typed.persistence.InitState" = file
//      "com.callhandling.typed.persistence.InProgressState" = file
//      "com.callhandling.typed.persistence.FinishState" = file
//      "com.callhandling.typed.persistence.UploadFile" = file
//      "com.callhandling.typed.persistence.UploadInProgressCommand" = file
//      "com.callhandling.typed.persistence.UploadedFile" = file
//      "com.callhandling.typed.persistence.UploadedFileCommand" = file
//      "com.callhandling.typed.persistence.UploadEvent" = file
//      "com.callhandling.typed.persistence.UploadedEvent" = file
//      "com.callhandling.typed.persistence.MultimediaFileInfo" = file
//      "com.callhandling.typed.persistence.AudioFileInfo" = file
//      "com.callhandling.typed.persistence.VideoFileInfo" = file
//      "com.callhandling.typed.persistence.VideoDimension" = file
//      "com.callhandling.typed.persistence.AddEvent" = fileList
//      "com.callhandling.typed.persistence.GetEvent" = fileList
//    }
//    serialization-identifiers {
//      "com.callhandling.typed.persistence.FileActorSerializer" = 100
//      "com.callhandling.typed.persistence.FileListActorSerializer" = 100
//    }
  }

  # For the sample, just bind to loopback and do not allow access from the network
  # the port is overridden by the logic in main class
  remote.artery.canonical.port = 0
  remote.artery.canonical.hostname = 127.0.0.1
  remote.artery.enabled = on
  remote.artery.transport = tcp

  cluster {
    seed-nodes = [
      "akka://ClusterSystem@127.0.0.1:2552",
      "akka://ClusterSystem@127.0.0.1:2553"]

    # Only for convenience in the sample, auto-downing should not be used for actual applications.
    # Read more here: http://doc.akka.io/docs/akka/current/scala/cluster-usage.html#auto-downing-do-not-use-
    auto-down-unreachable-after = 120s

    # Needed when running many actor systems in the same JVM
    jmx.multi-mbeans-in-same-jvm = on
  }

  # use Cassandra to store both snapshots and the events of the persistent actors
  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
  }
}

alpakka.s3 {
  buffer = "memory"
  aws {
    credentials {
      provider = static
      access-key-id = ${com.callhandling.aws.access-key-id}
      secret-access-key = ${com.callhandling.aws.secret-access-key}
    }
    region {
      provider = static
      default-region = ${com.callhandling.aws.default-region}
    }
  }
  path-style-access = true
  list-bucket-api-version = 2
}
